name: CI/CD

on:
  push:
    branches:
      - cicd
  pull_request:

permissions:
  packages: write

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch necessary branches and set BASE and HEAD (Push Event)
        if: github.event_name == 'push'
        run: |
          git fetch origin ${GITHUB_REF}:refs/remotes/origin/${GITHUB_REF}
          echo "BASE_COMMIT=${{ github.event.before }}" >> $GITHUB_ENV
          echo "HEAD_COMMIT=${{ github.sha }}" >> $GITHUB_ENV

      - name: Fetch necessary branches and set BASE and HEAD (Pull Request Event)
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}
          echo "BASE_COMMIT=origin/${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          echo "HEAD_COMMIT=${{ github.sha }}" >> $GITHUB_ENV

      - name: Read .nvmrc
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '${{ env.NODE_VERSION }}'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: pnpm install

      - name: Check formatting
        run: pnpx nx format:check --base=${{ env.BASE_COMMIT }} --head=${{ env.HEAD_COMMIT }}

      - name: Lint Code
        run: pnpx nx affected -t lint --base=${{ env.BASE_COMMIT }} --head=${{ env.HEAD_COMMIT }} --parallel=3

      - name: Run Tests
        run: pnpx nx affected -t test --base=${{ env.BASE_COMMIT }} --head=${{ env.HEAD_COMMIT }} --parallel=3

      - name: Build Project
        run: pnpx nx affected -t build --base=${{ env.BASE_COMMIT }} --head=${{ env.HEAD_COMMIT }} --parallel=3

  deploy:
    needs: build_and_test
    if: (github.event_name == 'push') && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/cicd')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push Docker image
        run: pnpm nx run-many --target container:production --parallel=3

      - name: Copy Docker files to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: 'docker/compose.yml,docker/cdn'
          overwrite: true
          target: ${{ github.ref == 'refs/heads/main' && 'mainnet' || 'testnet' }}

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script_stop: true
          script: |
            cd ${{ github.ref == 'refs/heads/main' && 'main' || 'dev' }}
            docker compose pull
            docker compose stop || true
            docker compose rm -f || true
            docker compose up -d
